
name: Build, Scan, and Deploy to Staging

on:
  push:
    branches:
      - master # Trigger the workflow on push to the master branch

  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  build-and-scan:
    
    name: Deploy to Staging
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Set up docker build prereqs (QEMU)
      uses: docker/setup-qemu-action@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.STG_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.STG_AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1

    - name: Log in to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag image 
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: calendar-service
        IMAGE_SHA: ${{ github.sha }} 
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_SHA .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_SHA $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_SHA
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

    - name: Scan Docker Image with AWS Inspector
      id: inspector
      uses: aws-actions/vulnerability-scan-github-action-for-amazon-inspector@v1.1.1
      with:
        artifact_type: 'container'
        artifact_path: ${{ steps.login-ecr.outputs.registry }}/calendar-service:${{ github.sha }}
        display_vulnerability_findings: "enabled"
        critical_threshold: 2
        high_threshold: 15
        medium_threshold: 10
        low_threshold: 10
        other_threshold: 10



    - name: Upload Inspector scan results as artifacts
      uses: actions/upload-artifact@v3
      with:
        name: Inspector Vulnerability Scan Artifacts
        path: |
          ${{ steps.inspector.outputs.inspector_scan_results }}
          ${{ steps.inspector.outputs.inspector_scan_results_csv }}
          ${{ steps.inspector.outputs.artifact_sbom }}
          ${{ steps.inspector.outputs.inspector_scan_results_markdown }}

    - name: Check vulnerability threshold
      id: check-threshold
      run: | 
        RESULT=${{ steps.inspector.outputs.vulnerability_threshold_exceeded }}"
        STATUS=$?
        echo ""Vulnerability threshold check result is ${RESULT}"
        #condition statement
        if [[ $STATUS == 0 ]];then
           echo "start deployment process using latest image "
        else
          echo "Newly Build docker images failed the threshold values: Start cleaup"
          aws ecr batch-delete-image --repository-name calendar-service --image-ids imageTag=${{ github.sha }}
          aws ecr batch-delete-image --repository-name calendar-service --image-ids imageTag=latest
          exit 1
        fi
          
        #echo "Vulnerability threshold check: ${{ steps.inspector.outputs.vulnerability_threshold_exceeded }}"

    # - name: Delete image from ECR if vulnerability threshold exceeded   
    #   if: ${{ steps.inspector.outputs.vulnerability_threshold_exceeded == '1' }}
    #   run: |
    #     aws ecr batch-delete-image --repository-name calendar-service --image-ids imageTag=${{ github.sha }}
    #     aws ecr batch-delete-image --repository-name calendar-service --image-ids imageTag=latest
    
    # - name: Fail if vulnerability threshold exceeded
    #   if: ${{ steps.inspector.outputs.vulnerability_threshold_exceeded == '1' }}
    #   run: |
    #     echo "Vulnerability threshold exceeded. Failing the job."
    #     exit 1

    - name: Deploy to ECS
      if:  ${{ steps.inspector.outputs.vulnerability_threshold_exceeded == '0' }}
      run: |
        aws ecs update-service --cluster Lead-Stag-cluster --service calendar-service --force-new-deployment
